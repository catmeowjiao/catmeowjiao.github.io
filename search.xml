<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>可达鸭2023国庆CSP-J复赛集训第5天补题报告</title>
      <link href="/2023/10/04/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC5%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2023/10/04/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC5%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1id="可达鸭2023国庆csp-j复赛集训第5天补题报告">可达鸭2023国庆CSP-J复赛集训第5天补题报告</h1><h2 id="重复判断">1 重复判断</h2><h3 id="赛中分数">赛中分数</h3><blockquote><p><code>100</code>分</p></blockquote><h3 id="赛中概况">赛中概况</h3><blockquote><p>花<code>30</code>分钟写了个正解(蒟蒻就是蒟蒻).</p></blockquote><h3 id="题目意思">题目意思</h3><blockquote><p>判断字符串<code>a</code>是不是由字符串<code>b</code>复读<code>x</code>遍得到的(<code>x</code>并不是一个固定的值).</p></blockquote><h3 id="题目思路">题目思路</h3><blockquote><p>先对长度进行判断,如果<code>a</code>的长度不是<code>b</code>的长度的倍数, <code>NO</code>,下一个. <br>如果长度没问题,用<code>a</code>的长度除以<code>b</code>的长度, 得到<code>c</code>,让<code>b</code>复读<code>c</code>遍, 判断<code>a</code>与结果是否相等,是就输出<code>YES</code>, 否则输出<code>NO</code>.</p></blockquote><h3 id="ac代码">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--)</span><br><span class="line">&#123;</span><br><span class="line">string a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="type">int</span> len1 = a.<span class="built_in">length</span>(),len2 = b.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">if</span> (len1 % len2)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c = len1 / len2;</span><br><span class="line">string ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= c;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">ans += b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == ans)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="歪果仁学乘法">2 歪果仁学乘法</h2><h3 id="赛中分数-1">赛中分数</h3><blockquote><p><code>100</code>分</p></blockquote><h3 id="赛中概况-1">赛中概况</h3><blockquote><p>画图发现并不是相乘再数位分离, 然后推了个公式.</p></blockquote><h3 id="题目意思-1">题目意思</h3><blockquote><p>对于<code>a * b = c</code>:<br>1.将<code>a</code>和<code>b</code>的每一位上的数画成线,不同位之间分隔开, <code>a</code>和<code>b</code>的线垂直.<br>2.数出每个方向上交点的个数, 即是<code>c</code>对应位置上的数.<br>如<code>12 * 13</code> <br><del>阳力图片</del> <br><imgsrc="https://medical-kg.cdn.bcebos.com/med-cms/image/image_16769924177240098f6b.png"alt="新冠阳性图片" /> <br>样例图片 <br><imgsrc="https://kdyfiles.oss-cn-hangzhou.aliyuncs.com/kdy28833d6c62d24566b7f2eec29802b16b.png"alt="12 * 13样例图片" /> <br>现在给定<code>a</code>和<code>b</code>,求交点个数.</p></blockquote><h3 id="题目思路-1">题目思路</h3><blockquote><p>见图 <img src="/files/歪果仁学乘法.png" alt="歪果仁学乘法.png" /></p></blockquote><h3 id="ac代码-1">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">cout &lt;&lt; (a / <span class="number">10</span> + a % <span class="number">10</span>) * (b / <span class="number">10</span> + b % <span class="number">10</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重求和">3 去重求和</h2><h3 id="赛中分数-2">赛中分数</h3><blockquote><p><code>0</code>分</p></blockquote><h3 id="赛中概况-2">赛中概况</h3><blockquote><p>写了个暴力, 结果死循环, 找了好久修好了, 结果又出现了不知道什么错误,程序直接结束了, 调了好久也没调出来</p></blockquote><h3 id="题目意思-2">题目意思</h3><blockquote><p>$sum(l,r)=unique(a[l],a[r])  then \sum_{i=l}^r a[i] $.</p></blockquote><p><br>求<span class="math inline">\(\sum_{l=1}^n \sum_{r=1}^nsum(l,r)\)</span></p><h3 id="题目思路-2">题目思路</h3><blockquote><p><img src="/files/去重求和.png" alt="去重求和.png" /> <br>所以,对于<span class="math inline">\(A_i\)</span>, <spanclass="math inline">\(sum\)</span>应该加上<spanclass="math inline">\(A_i \times (\)</span>起点方案数<spanclass="math inline">\(\times\)</span>终点方案数<spanclass="math inline">\()\)</span>.</p></blockquote><h3 id="ac代码-2">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">500010</span>],l[<span class="number">500010</span>],r[<span class="number">500010</span>];</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">l[i] = m[a[i]] + <span class="number">1</span>;</span><br><span class="line">m[a[i]] = i;</span><br><span class="line">ans += <span class="number">1ll</span> * a[i] * (i - l[i] + <span class="number">1</span>) % mod * (n - i + <span class="number">1</span>) % mod;</span><br><span class="line">ans %= mod;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点集操作">4 点集操作</h2><h3 id="赛中分数-3">赛中分数</h3><p><code>0</code>分</p><h3 id="赛中概况-3">赛中概况</h3><blockquote><p>想了一段时间, 也没想出来.</p></blockquote><h3 id="题目意思-3">题目意思</h3><blockquote><p>求对给定的图进行任意次下面的操作后剩余的最小点数 <br>操作步骤:</p></blockquote><p><br>1.任选不同的两个点<span class="math inline">\(i,j\)</span><br>2.称<span class="math inline">\(A_i\)</span>为<spanclass="math inline">\(i\)</span>能到达的所有点组成的点集, <spanclass="math inline">\(A_j\)</span>为<spanclass="math inline">\(j\)</span>能到达的所有点组成的点集. <br>注:任意一个点均可到达这个点本身. <br>3.设<spanclass="math inline">\(B\)</span>为一个最大的点集, 满足<spanclass="math inline">\(B\)</span>既是<spanclass="math inline">\(A_i\)</span>的子集, 又是<spanclass="math inline">\(A_j\)</span>的子集. <br>4.将<spanclass="math inline">\(B\)</span>在图中变成一个新点, <spanclass="math inline">\(B\)</span>内的所有边全部删除. 点集<spanclass="math inline">\(B\)</span>以外的点与点集<spanclass="math inline">\(B\)</span>以内的点的连边关系转移到新点上.</p><h3 id="题目思路-3">题目思路</h3><blockquote><p>样例: <br>$ 5  6 \ 2  1 \ 5  1 \ 2  3 \ 4  3 \ 5  4 \ 4  1 \ $对于样例, 把有入度的相关点的重叠点变成一个大点B, 用一次操作. <br>把<spanclass="math inline">\(1 \ 4 \ 5\)</span>合成一个大点, 最终变成3个点.<br>把<span class="math inline">\(5 \ 4\)</span>边去掉, 就没有大点,最小点数仍为<span class="math inline">\(5\)</span>个点.<br>在一个单向链上,只需要让链头和链尾进行一次操作就可以将整个链变成两个点.<br>所以每次操作可以在一条所含点数超过<spanclass="math inline">\(2\)</span>的单向链上进行, 直至不能继续操作,剩下的点的个数即为图中剩余的最小点数. <br>入度为<spanclass="math inline">\(0\)</span>的点删不掉,满足所有入边对应点入度为<spanclass="math inline">\(0\)</span>的点也删不掉,可以将这些点(满足所有入边对应点入度为<spanclass="math inline">\(0\)</span>的点)看成新点, 统计这些点个数即可.<br>时间复杂度为<span class="math inline">\(O(n + m)\)</span></p></blockquote><h3 id="ac代码-3">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> to,next;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e6</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> x[<span class="number">2000010</span>],y[<span class="number">2000010</span>],in[<span class="number">1000010</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000010</span>],cnt,ans;</span><br><span class="line"><span class="type">bool</span> b[<span class="number">1000010</span>],vis[<span class="number">1000010</span>];</span><br><span class="line">node e[<span class="number">2000010</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;v;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt;q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].to = v;</span><br><span class="line">e[cnt].next = head[u];</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"><span class="built_in">add</span>(x[i],y[i]);</span><br><span class="line">in[y[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!in[i])</span><br><span class="line">&#123;</span><br><span class="line">v.<span class="built_in">push_back</span>(i);</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in[x[i]])</span><br><span class="line">&#123;</span><br><span class="line">b[y[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; v.<span class="built_in">size</span>();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = head[v[i]];j;j = e[j].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!b[e[j].to])</span><br><span class="line">&#123;</span><br><span class="line">b[e[j].to]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可达鸭2023国庆CSP-J复赛集训第4天补题报告</title>
      <link href="/2023/10/03/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC4%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2023/10/03/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC4%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1id="可达鸭2023国庆csp-j复赛集训第4天补题报告">可达鸭2023国庆CSP-J复赛集训第4天补题报告</h1><ul><li><p>1 复读机</p><ul><li><p>赛中分数</p><blockquote><p><code>100</code>分</p></blockquote></li><li><p>赛中概况</p><blockquote><p>花1小时写了个正解, 然后老师说有一种奇特的写法,我当时猜了个<code>regex</code>, 还真的猜对了...</p></blockquote></li><li><p>题目意思</p><blockquote><p>遍历给定的字符串<code>s</code>, 遇到字母就放进字符串<code>ans</code>,遇到数字就让<code>x *= 10</code>, 然后<code>x += [这个数字]</code>,在下一次遇到字母时就<code>ans = ans * x</code>(这个操作并不是<code>C++</code>包含的,<code>Python</code>可以使用这个操作,这里的意思是把<code>ans</code>复读<code>x</code>遍,然后把复读后的结果赋值给<code>ans</code>).</p></blockquote></li><li><p>题目思路</p><blockquote><p>模拟.</p></blockquote></li><li><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        string tmp,ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= x;i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        tmp += ans;</span><br><span class="line">                    &#125;</span><br><span class="line">                    x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    ans = tmp;</span><br><span class="line">                    tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    flag = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ans += s[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag)</span><br><span class="line">                &#123;</span><br><span class="line">                    x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                x *= <span class="number">10</span>;</span><br><span class="line">                x += s[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        x--;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = ans;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= x;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp += ans;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>2 小可的矛与盾</p><ul><li><p>赛中分数</p><blockquote><p><code>70</code>分</p></blockquote></li><li><p>赛中概况</p><blockquote><p>没开<code>long long</code>, 开了能拿<code>90</code>分,<code>minn</code>特殊处理后<code>100</code>分.</p></blockquote></li><li><p>题目意思</p><blockquote><p>求一个<code>pos</code>,让<code>1 ~ pos</code>的矛攻击力总和与<code>pos + 1 ~ n</code>的盾防御力总和之差的绝对值最小.</p></blockquote></li><li><p>题目思路</p><blockquote><p>前缀和 + 枚举,注意求<code>minn</code>时<code>minn</code>初始值为<code>max(sum1[n],sum2[n])</code>,因为这是最极限的情况,如果<code>minn</code>初始值设为<code>1e18</code>等值,最后一个<code>for</code>循环范围应该是<code>0 ~ n + 1</code>.</p></blockquote></li><li><p>AC代码</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">100010</span>],sum1[<span class="number">100010</span>],sum2[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = s[i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (a[i])</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            sum1[i] = sum1[i - <span class="number">1</span>] + i;</span><br><span class="line">            sum2[i] = sum2[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            sum2[i] = sum2[i - <span class="number">1</span>] + i;</span><br><span class="line">            sum1[i] = sum1[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> minn = <span class="built_in">min</span>(sum1[n],sum2[n]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> x = <span class="built_in">abs</span>(sum2[i] - (sum1[n] - sum1[i]));</span><br><span class="line">        <span class="keyword">if</span> (x &lt; minn)</span><br><span class="line">        &#123;</span><br><span class="line">            minn = x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; minn;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>3 不合法字符串</p><ul><li><p>赛中分数</p><blockquote><p><code>0</code>分</p></blockquote></li><li><p>赛中概况</p><blockquote><p>写了个贪心, <code>0</code>分.</p></blockquote></li><li><p>题目意思</p><blockquote><p>用最少的<code>*</code>号和谐所有不合法字符串.</p></blockquote></li><li><p>题目思路</p><blockquote><p>最优更改策略为修改能找到的单词的最后一位,但是还需要一个枚举策略才能保证最优. 枚举策略是对字符串每一位往前寻找,然后若是找到任意一个以这一位结尾的单词, 则更改这一位.</p></blockquote></li><li><p>AC代码</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string s[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; s[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        string a;</span><br><span class="line">        cin &gt;&gt; a;</span><br><span class="line">        <span class="type">int</span> m = a.<span class="built_in">length</span>();</span><br><span class="line">        a = <span class="string">&#x27; &#x27;</span> + a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; s[j].<span class="built_in">length</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (a.<span class="built_in">substr</span>(i - s[j].<span class="built_in">length</span>() + <span class="number">1</span>,s[j].<span class="built_in">length</span>()) == s[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>4 虚假的珂朵莉树</p><ul><li><p>赛中分数</p><p><code>0</code>分</p></li><li><p>赛中概况</p><blockquote><p>没想到如何打暴力, 想出来了能拿<code>40 ~ 100</code>分.</p></blockquote></li><li><p>题目意思</p><blockquote><p>有一棵树, 有<code>n</code>个节点, 根节点为<code>1</code>,每个节点都有一个权值. 有<code>q</code>次操作, 操作1:结点<code>u</code>的权值加<code>k</code>,并对与<code>u</code>相邻的结点中, 深度比<code>u</code>小的结点重复操作1.操作2: 结点<code>u</code>的权值加<code>k</code>,并对与<code>u</code>相邻的结点中, 深度比<code>u</code>大的结点重复操作2.求<code>q</code>次操作后所有节点的权值是多少.</p></blockquote></li><li><p>题目思路 &gt;我们可以使用lazy标记来实现.&gt;若是同一个点多次操作1, 可以合成1次操作1, 权值为多次操作一的权值和,而其他结点的操作1也可以和当前结点的操作1合并, 操作二同理. &gt;对于操作1,深度最大的结点不会受到其他结点的影响, 那么深度最大的结点操作完后,深度次大的结点就不会再受到影响. 以此类推, 根据结点深度从大到小进行操作1,这样只需要遍历一次即可完成所有的操作1. &gt;对于操作2, 类似操作1,根据结点深度从小到大操作. &gt;先计算各个结点的深度,然后在up和down数组中记录权值和, 再根据操作按深度进行传递,最后将up和down数组与原数组求和即可.</p></li><li><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> p = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> to,nxt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cnt,head[<span class="number">1000005</span>],d[<span class="number">1000005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[<span class="number">1000010</span>],up[<span class="number">1000010</span>],down[<span class="number">1000010</span>];</span><br><span class="line">node e[<span class="number">5000005</span>];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; g;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].to = v;</span><br><span class="line">    e[cnt].nxt = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    g.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(d[u],u));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i=e[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        d[v] = d[u]+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n,m,q;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - <span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">add</span>(u,v);</span><br><span class="line">        <span class="built_in">add</span>(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u,v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="built_in">add</span>(u,v);</span><br><span class="line">        <span class="built_in">add</span>(v,u);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= q;i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> t,u,v;</span><br><span class="line">        cin &gt;&gt; t &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            up[u] = (up[u] + v) % p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            down[u] = (down[u] + v) % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(),g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; g.<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = g[i].second;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = head[x];j;j = e[j].nxt)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> y = e[j].to;</span><br><span class="line">            <span class="keyword">if</span> (d[y] &gt; d[x])</span><br><span class="line">            &#123;</span><br><span class="line">                down[y] = (down[y] + down[x]) % p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(g.<span class="built_in">begin</span>(),g.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; g.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = g[i].second;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j=head[x];j;j=e[j].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> y = e[j].to;</span><br><span class="line">            <span class="keyword">if</span> (d[y] &lt; d[x])</span><br><span class="line">            &#123;</span><br><span class="line">                up[y] = (up[y] + up[x]) % p;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; (a[i] + up[i] + down[i]) % p &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可达鸭2023国庆CSP-J复赛集训第3天补题报告</title>
      <link href="/2023/10/03/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC3%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2023/10/03/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC3%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1id="可达鸭2023国庆csp-j复赛集训第3天补题报告">可达鸭2023国庆CSP-J复赛集训第3天补题报告</h1><h2 id="数字对应">1 数字对应</h2><h3 id="赛中分数">赛中分数</h3><blockquote><p><code>100</code>分</p></blockquote><h3 id="赛中概况">赛中概况</h3><blockquote><p>花二十分钟写了个暴力, 觉得会<code>TLE</code>,然后想了<code>1</code>小时, 加了一堆优化, 但还是没想出来"正解",考完以后发现我写的就是正解...</p></blockquote><h3 id="题目意思">题目意思</h3><blockquote><p>对于数组<code>a</code>构造一个数组<code>b</code>,<code>a</code>里面的每个相同的数都对应<code>b</code>里面的一个数,<code>b</code>里面的数不能在<code>a</code>里面,求字典序最小的<code>b</code>.<br>比如<code>a</code>为<code>3 3 4 2 4 7</code>,<code>3</code>对应<code>1</code>, <code>4</code>对应<code>5</code>,<code>2</code>对应<code>6</code>, <code>7</code>对应<code>8</code>,所以<code>b</code>为<code>1 1 5 6 5 8</code>.</p></blockquote><h3 id="题目思路">题目思路</h3><blockquote><p>用两个map, 一个记录数字是否用过,一个记录<code>a[i]</code>对应的<code>b[i]</code>, 暴力即可.</p></blockquote><h3 id="ac代码">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201402L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;any&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;charconv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;filesystem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory_resource&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string_view&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt; 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;compare&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;concepts&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cpp_impl_coroutine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;coroutine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numbers&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;span&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stop_token&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;version&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">100010</span>];</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt;m;</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">bool</span>&gt;c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="type">int</span> lst=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">c[a[i]]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m[a[i]])</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; m[a[i]] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (lst;lst&lt;=<span class="number">2147483646</span>;lst++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!c[lst])</span><br><span class="line">&#123;</span><br><span class="line">m[a[i]]=lst;</span><br><span class="line">c[lst]=<span class="literal">true</span>;</span><br><span class="line">cout &lt;&lt; m[a[i]] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="技能学习">2 技能学习</h2><h3 id="赛中分数-1">赛中分数</h3><blockquote><p><code>0</code>分</p></blockquote><h3 id="赛中概况-1">赛中概况</h3><blockquote><p>想复杂了, 没做出来.</p></blockquote><h3 id="题目意思-1">题目意思</h3><blockquote><p>有<code>n</code>个同学学习技能.<br>有<code>m</code>份学习资料,学习资料至少有<code>k</code>份才能学习.<br>如果一位同学拿到了<code>p</code>份学习资料,那么每分钟会增长<code>p</code>点技能点,技能点最多到<code>q</code>.<br>总共有<code>t</code>分钟,技能点最多是多少?</p></blockquote><h3 id="题目思路-1">题目思路</h3><blockquote><p>让学习资料发的尽量平均.</p></blockquote><h3 id="ac代码-1">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201402L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;any&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;charconv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;filesystem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory_resource&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string_view&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt; 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;compare&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;concepts&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cpp_impl_coroutine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;coroutine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numbers&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;span&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stop_token&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;version&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n,m,k,q,t;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; q &gt;&gt; t;</span><br><span class="line"><span class="keyword">if</span> (m &lt; k)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n * k &gt; m)</span><br><span class="line">&#123;</span><br><span class="line">n = m / k;</span><br><span class="line">&#125;</span><br><span class="line">m -= n * k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f2,n2;</span><br><span class="line"><span class="keyword">if</span> (m % n)</span><br><span class="line">&#123;</span><br><span class="line">f2 = k + m / n + <span class="number">1</span>;</span><br><span class="line">n2 = m % n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> f1 = k + m / n,n1 = n - n2;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans = <span class="built_in">min</span>(f1 * t,q) * n1 + <span class="built_in">min</span>(f2 * t,q) * n2;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="等于">3 等于</h2><h3 id="赛中分数-2">赛中分数</h3><blockquote><p><code>0</code>分</p></blockquote><h3 id="赛中概况-2">赛中概况</h3><blockquote><p>没想出来</p></blockquote><h3 id="题目意思-2">题目意思</h3><blockquote><p>数组<code>a</code>中的每个元素都是<code>-2 -1 1 2</code>中的一个,求有多少个最大值的绝对值等于最小值的绝对值的子序列.</p></blockquote><h3 id="题目思路-2">题目思路</h3><blockquote><p>满足题目要求的情况有两种: <br>1.区间中只有一种数字.<br>2.区间中最大值为<code>x</code>, 最小值为<code>-x</code>.<br>对于第二种情况, 固定左端点, 找合法的右端点. <br>(1)最大值为1,最小值为-1的情况, 需要保证区间中有1和-1, 没有2和-2.可以通过维护左端点向后的<code>-2 -1 1 2</code>的初始位置.右端点的起始位置为<code>max(下一个1的位置, 下一个-1的位置)</code>,结束位置为<code>min(下一个2的位置, 下一个-2的位置)</code> 2.对于最大值为 最小值 的情况：右端点需要保证：区间中有 和。维护方法类似上面。至此本题做完，复杂度为 。</p></blockquote><h3 id="ac代码-2">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201402L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;any&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;charconv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;filesystem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory_resource&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string_view&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt; 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;compare&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;concepts&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cpp_impl_coroutine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;coroutine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numbers&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;span&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stop_token&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;version&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">500010</span>],nxt[<span class="number">500010</span>][<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(nxt,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(nxt));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ret = <span class="number">1</span>,lst = a[<span class="number">1</span>],ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] == lst)</span><br><span class="line">&#123;</span><br><span class="line">ret++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ans += ret * (ret + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">ret = <span class="number">1</span>;</span><br><span class="line">lst = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans += ret * (ret + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> spos,epos;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n;i &gt;= <span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">nxt[i][j] = nxt[i + <span class="number">1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">nxt[i][a[i] + <span class="number">2</span>] = i;</span><br><span class="line"><span class="type">int</span> maxpos1 = nxt[i][<span class="number">1</span> + <span class="number">2</span>],maxpos2 = nxt[i][<span class="number">2</span> + <span class="number">2</span>],minpos1 = nxt[i][<span class="number">-1</span> + <span class="number">2</span>],minpos2 = nxt[i][<span class="number">-2</span> + <span class="number">2</span>];</span><br><span class="line">spos = <span class="built_in">max</span>(maxpos2,minpos2);</span><br><span class="line">epos = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (spos != <span class="number">0x3f3f3f3f</span> &amp;&amp; spos &lt; epos)</span><br><span class="line">&#123;</span><br><span class="line">ans += epos - spos;</span><br><span class="line">&#125;</span><br><span class="line">spos = <span class="built_in">max</span>(maxpos1,minpos1);</span><br><span class="line">epos = <span class="built_in">min</span>(<span class="built_in">min</span>(maxpos2,minpos2),(<span class="type">int</span>)n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (spos != <span class="number">0x3f3f3f3f</span> &amp;&amp; spos &lt; epos)</span><br><span class="line">ans += epos - spos;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小方差">4 最小方差</h2><h3 id="赛中分数-3">赛中分数</h3><p><code>0</code>分</p><h3 id="赛中概况-3">赛中概况</h3><blockquote><p>没想出来</p></blockquote><h3 id="题目意思-3">题目意思</h3><blockquote><p>在给定的树中寻找一个树根,将树上每个点到<code>树根</code>的距离存进序列<code>a</code>,让序列<code>a</code>的方差最小.</p></blockquote><h3 id="题目思路-3">题目思路</h3><h4 id="前置推导">前置推导</h4><blockquote><p><span class="math display">\[\begin {aligned}&amp; n \sum(a_i - x) ^ 2 \\&amp; = n \sum(a_i ^ 2 + x ^ 2 - 2 a_i x) \\&amp; = n \sum a_i ^ 2 + n \sum x ^ 2 - n \sum 2 a_i x \\&amp; = n \sum a_i ^ 2 + n ^ 2 x ^ 2 - 2 n x \sum a_i \\&amp; = n \sum a_i ^ 2 + (\sum a_i) ^ 2 - 2(\sum a_i) ^ 2 \\&amp; = n \sum a_i ^ 2 - (\sum a_i) ^ 2\end {aligned}\]</span></p></blockquote><p><code>sum1[u]</code>表示以<code>u</code>为根的子树上各点到<code>u</code>的距离和,<code>sum2[u]</code>表示以<code>u</code>为根的子树上各点到<code>u</code>的距离平方和.</p><h4 id="sum1推导">sum1推导</h4><blockquote><p><span class="math display">\[p\begin {aligned}&amp; sum1[v] = \sum a_i \\&amp; \rightarrow sum1[v] = \sum(a_i + 1) \\&amp; = \sum a_i + \sum 1 \\&amp; = sum1[v] + sz[v]\end {aligned}\]</span></p></blockquote><h4 id="sum2推导">sum2推导</h4><blockquote><p><span class="math display">\[\begin {aligned}&amp; sum2[v] = \sum a_i ^ 2 \\&amp; \rightarrow \sum (a_i + 1) ^ 2 \\&amp; = \sum (a_i ^ 2 + 1 + 2 a_i) \\&amp; = \sum a_i ^ 2 + \sum 1 + 2 \sum a_i \\&amp; = sum2[v] + sz[v] + 2 sum1[v]\end {aligned}\]</span></p></blockquote><h3 id="ac代码-3">AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cuchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;codecvt&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201402L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shared_mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;any&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;charconv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;filesystem&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory_resource&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string_view&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cplusplus &gt; 201703L</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bit&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;compare&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;concepts&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> __cpp_impl_coroutine</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;coroutine&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;numbers&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ranges&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;span&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stop_token&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;version&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,cnt = <span class="number">1</span>,head[<span class="number">40010</span>],sz[<span class="number">40010</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans,sum1[<span class="number">40010</span>],sum2[<span class="number">40010</span>];</span><br><span class="line">node edge[<span class="number">80010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">1</span>;</span><br><span class="line">    ans = numeric_limits&lt;<span class="type">long</span> <span class="type">long</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        head[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].nxt = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz[u] = <span class="number">1</span>;</span><br><span class="line">    sum1[u] = sum2[u] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs1</span>(v,u);</span><br><span class="line">        sz[u] += sz[v];</span><br><span class="line">        sum1[u] += sz[v] + sum1[v];</span><br><span class="line">        sum2[u] += sz[v] + <span class="number">2</span> * sum1[v] + sum2[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">long</span> <span class="type">long</span> s1,<span class="type">long</span> <span class="type">long</span> s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = <span class="built_in">min</span>(ans,n * (sum2[u] + s2) - (sum1[u] + s1) * (sum1[u] + s1));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> nn = n - sz[v],d1 = sum1[u] - (sum1[v] + sz[v]) + s1,d2 = sum2[u] - (sz[v] + <span class="number">2</span> * sum1[v] + sum2[v]) + s2;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,u,d1 + nn,nn + <span class="number">2</span> * d1 + d2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u,v;</span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="built_in">add</span>(u,v);</span><br><span class="line">            <span class="built_in">add</span>(v,u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可达鸭2023国庆CSP-J复赛集训第2天补题报告</title>
      <link href="/2023/10/03/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC2%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2023/10/03/%E5%8F%AF%E8%BE%BE%E9%B8%AD2023%E5%9B%BD%E5%BA%86CSP-J%E5%A4%8D%E8%B5%9B%E9%9B%86%E8%AE%AD%E7%AC%AC2%E5%A4%A9%E8%A1%A5%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h1id="可达鸭2023国庆csp-j复赛集训第2天补题报告">可达鸭2023国庆CSP-J复赛集训第2天补题报告</h1><ul><li><p>1 人员借调</p><ul><li><p>赛中分数</p><blockquote><p><code>100</code>分</p></blockquote></li><li><p>赛中概况</p><blockquote><p>花了四十分钟写这道题, 然后花半小时调完了<code>Bug</code>,去写第二题了, 后来有个同学问了一个问题, 我又发现一个<code>Bug</code>,然后改了二十分钟, 心态炸了, 第二题就爆0了.</p></blockquote></li><li><p>题目意思</p><blockquote><p>小可现在在<code>A</code>地, 她在B地有<code>n</code>个工作,每次往返需要<code>400</code>分钟,如果在<code>B</code>地呆的时间(不包括往返时间)超过<code>240</code>分钟,回A地后需要等<code>10080</code>分钟才能再次前往<code>B</code>地(这个过程下面叫做"坐牢"),求最少需要多少时间.</p></blockquote></li><li><p>题目思路</p><blockquote><p>有两种最优的可能性</p><ul><li><p>尽量不坐牢,如果不得不坐牢则把后面的工作一起做了再去坐牢.</p></li><li><p>一起干完回去坐牢</p></li></ul><p>两种都算出来求最小值即可</p></blockquote></li><li><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="type">int</span> n;cin&gt;&gt;n;<span class="type">int</span> cur=<span class="number">0</span>,ans1=<span class="number">0</span>,ans2=<span class="number">400</span>;<span class="type">bool</span> flag=<span class="literal">false</span>;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="type">int</span> a;cin&gt;&gt;a;<span class="keyword">if</span>(flag)&#123;ans1+=a;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(a&lt;<span class="number">240</span>)&#123;<span class="keyword">if</span>(cur+a&lt;<span class="number">240</span>)&#123;cur+=a;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(cur)&#123;ans1+=cur+<span class="number">400</span>;&#125;cur=a;&#125;&#125;<span class="keyword">else</span>&#123;<span class="keyword">if</span>(cur)&#123;ans1+=cur+<span class="number">400</span>;&#125;flag=<span class="literal">true</span>;ans1+=a+<span class="number">10480</span>;&#125;&#125;ans2+=a;&#125;<span class="keyword">if</span>(cur)&#123;ans1+=cur+<span class="number">400</span>;&#125;<span class="keyword">if</span>(ans2&gt;=<span class="number">640</span>)&#123;ans2+=<span class="number">10080</span>;&#125;cout&lt;&lt;<span class="built_in">min</span>(ans1,ans2);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>2 计算</p><ul><li><p>赛中分数</p><blockquote><p><code>0</code>分</p></blockquote></li><li><p>赛中概况</p><blockquote><p>写了一个小时四十分钟, 去改第一题了, 回来就不会写了.</p></blockquote></li><li><p>题目意思</p><blockquote><p>在<code>m ~ n</code>之间找到一个数, 使其数位和为<code>k</code>,且乘积最大.</p></blockquote></li><li><p>题目思路</p><blockquote><p>通过DP进行预处理,让<code>i</code>从<code>1</code>遍历到<code>5000000</code>(<code>5 * (10 ^ 6)</code>),<code>i</code>为<code>1 ~ 9</code>时,<code>sum[i]</code>与<code>mul[i]</code>均为<code>i</code>,其他情况<code>sum[i]</code>为<code>sum[i / 10] + i % 10</code>,<code>mul[i]</code>为<code>mul[i / 10] * (i % 10)</code>,后面查询即可.</p></blockquote></li><li><p>AC代码</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="type">int</span> sum[<span class="number">5000010</span>],mul[<span class="number">5000010</span>];<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;sum[i]=i;mul[i]=i;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&lt;=<span class="number">5000000</span>;i++)&#123;sum[i]=sum[i/<span class="number">10</span>]+i%<span class="number">10</span>;mul[i]=mul[i/<span class="number">10</span>]*(i%<span class="number">10</span>);&#125;<span class="type">int</span> t;cin&gt;&gt;t;<span class="keyword">while</span>(t--)&#123;<span class="type">int</span> m,n,k;cin&gt;&gt;m&gt;&gt;n&gt;&gt;k;<span class="type">int</span> maxn=<span class="number">-0x3f3f3f3f</span>,ans;<span class="keyword">for</span>(<span class="type">int</span> i=m;i&lt;=n;i++)&#123;<span class="keyword">if</span>(sum[i]==k)&#123;<span class="keyword">if</span>(mul[i]&gt;maxn)&#123;maxn=mul[i];ans=i;&#125;&#125;&#125;cout&lt;&lt;ans&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;maxn&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;&#125;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>3 智能公交</p><ul><li><p>赛中分数</p><blockquote><p><code>0</code>分</p></blockquote></li><li><p>赛中概况</p><blockquote><p>看了看, 感觉不会, 就没写.</p></blockquote></li><li><p>题目意思</p><blockquote><p>现在有<code>m</code>个人要依次乘坐智能公交,每个人都会等待智能公交停在<code>x</code>站台之后在按动当前站台按钮准备乘坐公交.现在已知第<code>i</code>个人都是从<code>a</code>站台到<code>b</code>站台.请你计算<code>x</code>,使得智能公交移动距离最短.最终输出<code>x</code>和最短的距离,<code>x</code>若有多个, 输出最小的一个.</p></blockquote></li><li><p>题目思路</p><blockquote><p><code>x</code>在<code>a</code>和<code>b</code>之间,公交车从<code>a</code>开到<code>b</code>公交车,需要移动<code>2 * abs(a - b)</code>.<br>公交车停靠位置若在<code>a - 1</code>,则公交车要多移动2;若停靠位置在<code>a - 2</code>,则公交车要多移动<code>4</code>.<br>公交车停靠位置所对应的多移动的距离为等差数列,公差为<code>2</code>.<br><code>m[x]</code>表示公交车停在<code>x</code>时的位置,则每给一组<code>a</code>和<code>b</code>,m数组全部加上<code>2 * abs(a - b)</code>,<code>a - 1 ~ 1</code>全部加上公差为<code>2</code>的等差数列,<code>b + 1 ~ n</code>全部加上公差为<code>2</code>的等差数列.</p></blockquote></li><li><p>AC代码</p><p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="type">long</span> <span class="type">long</span> sum1[<span class="number">500010</span>],suf1[<span class="number">500010</span>],sum2[<span class="number">500010</span>],suf2[<span class="number">500010</span>];<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="type">int</span> n,m;<span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>,pos,ans=<span class="number">1e18</span>;cin&gt;&gt;n&gt;&gt;m;<span class="keyword">while</span>(m--)&#123;<span class="type">int</span> a,b;cin&gt;&gt;a&gt;&gt;b;sum1[a<span class="number">-1</span>]+=<span class="number">2</span>;suf1[b+<span class="number">1</span>]+=<span class="number">2</span>;sum+=(b-a)*<span class="number">2</span>;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;sum1[i]+=sum1[i+<span class="number">1</span>];sum2[i]=sum2[i+<span class="number">1</span>]+sum1[i];&#125;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;suf1[i]+=suf1[i<span class="number">-1</span>];suf2[i]+=suf2[i<span class="number">-1</span>]+suf1[i];<span class="keyword">if</span>(sum2[i]+suf2[i]&lt;ans)&#123;pos=i;ans=sum2[i]+suf2[i];&#125;&#125;cout&lt;&lt;pos&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;sum+ans&lt;&lt;endl;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li><li><p>4 异或和</p><ul><li><p>赛中分数</p><p><code>0</code>分</p></li><li><p>赛中概况</p><blockquote><p>看了看, 感觉不会, 就没写.</p></blockquote></li><li><p>题目意思</p><blockquote><p>有很多个集合, 在每个集合中选择一个或多个数字,所有集合中选择的数字总数不超过<code>m</code>,集合收益为这些数字的异或和, 总收益为集合收益的和.</p></blockquote></li><li><p>题目思路</p><blockquote><p>对每个集合都做一次如下操作:&gt;设<code>dp[i][j]</code>表示遍历到第<code>i</code>个数时需要多少次操作才能异或出<code>j</code>,状态转移方程:<br><code>f[i][j] = min(f[i][j],f[i - 1][j]);</code><br><code>f[i][j ^ a[i]] = min(f[i - 1][j],f[i][j ^ a[i]]);</code><br>为了避免空间超限,我们使用滚动数组滚掉存组数的一维.<br>接下来分组背包即可.</p></blockquote></li><li><p>AC代码 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="type">int</span> cnt[<span class="number">2010</span>]=&#123;&#125;,dp[<span class="number">2010</span>][<span class="number">2050</span>],dp2[<span class="number">2050</span>]=&#123;&#125;,num[<span class="number">2010</span>][<span class="number">2010</span>]=&#123;&#125;;vector&lt;<span class="type">int</span>&gt;v[<span class="number">2010</span>];<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="type">int</span> x,y;cin&gt;&gt;x&gt;&gt;y;v[y].<span class="built_in">push_back</span>(x);cnt[y]++;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2047</span>;j++)&#123;dp[i][j]=<span class="number">0x3f3f3f3f</span>;&#125;&#125;<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">2000</span>;k++)&#123;<span class="keyword">if</span>(cnt[k])&#123;dp[<span class="number">1</span>][v[k][<span class="number">0</span>]]=<span class="number">1</span>;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=cnt[k];i++)&#123;dp[i][v[k][i<span class="number">-1</span>]]=<span class="number">1</span>;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2047</span>;j++)&#123;<span class="keyword">if</span>(dp[i<span class="number">-1</span>][j]!=<span class="number">0x3f3f3f3f</span>)&#123;dp[i][j]=<span class="built_in">min</span>(dp[i][j],dp[i<span class="number">-1</span>][j]);dp[i][j^v[k][i<span class="number">-1</span>]]=<span class="built_in">min</span>(dp[i][j^v[k][i<span class="number">-1</span>]],dp[i<span class="number">-1</span>][j]+<span class="number">1</span>);&#125;&#125;&#125;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2047</span>;j++)&#123;<span class="keyword">if</span>(dp[cnt[k]][j]!=<span class="number">0x3f3f3f3f</span>)&#123;num[k][dp[cnt[k]][j]]=<span class="built_in">max</span>(num[k][dp[cnt[k]][j]],j);&#125;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt[k];i++)&#123;<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2047</span>;j++)&#123;dp[i][j]=<span class="number">0x3f3f3f3f</span>;&#125;&#125;&#125;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2000</span>;i++)&#123;<span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=cnt[i];k++)&#123;<span class="keyword">if</span>(j&gt;=k)&#123;dp2[j]=<span class="built_in">max</span>(dp2[j],dp2[j-k]+num[i][k]);&#125;&#125;&#125;&#125;cout&lt;&lt;dp2[m];&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NoneNews第1期</title>
      <link href="/2023/08/15/NoneNews-%E7%AC%AC1%E6%9C%9F/"/>
      <url>/2023/08/15/NoneNews-%E7%AC%AC1%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="nonenews-第1期">NoneNews 第<code>1</code>期</h1><p>2023/08/15 星期二 第1期 售价0元</p><p>主编: meowjiao</p><p>今日寄语: NoneBot真的太NB了!</p><hr /><h2 id="今日重磅">今日重磅</h2><h3 id="nonenews起源竟是一张整活图片">NoneNews起源竟是一张整活图片?</h3><p>昨日, 在"NoneBot闲聊吹水"群内,一位群友发送了一张整活图片——NoneNews中国特供版</p><p>该图片被转发到"NoneBot非官方交流群"内, 网友们顿时议论纷纷.</p><p>这也是本报的起源, 本报致力于将快乐带给大家.</p><figure><img src="/files/-3da5f9bdd77591ce.png" alt="-3da5f9bdd77591ce.png" /><figcaption aria-hidden="true">-3da5f9bdd77591ce.png</figcaption></figure><hr /><p>昨日, 一名网友在"NoneBot非官方交流群"内求助: "我电脑是台式机,没法带出来旅游, 现在用不了电脑, 烦得要死, 谁给我一台笔记本?",热心网友们看到后立刻回复"我有个没屏幕的旧电脑, Intel M3-7Y30 DDR32333MHz 4G, 你要吗?", "我有一个装有Arch Linux, Xfce4, 开Xfce4Terminal都困难的笔记本电脑, 你要吗?"等消息</p><figure><img src="/files/-56e5f466be3dc9d4.png" alt="-56e5f466be3dc9d4.png" /><figcaption aria-hidden="true">-56e5f466be3dc9d4.png</figcaption></figure><figure><img src="/files/-1c6eeafa08901a04.png" alt="-1c6eeafa08901a04.png" /><figcaption aria-hidden="true">-1c6eeafa08901a04.png</figcaption></figure><figure><img src="/files/6f812cd44cf02da9.png" alt="6f812cd44cf02da9.png" /><figcaption aria-hidden="true">6f812cd44cf02da9.png</figcaption></figure><figure><img src="/files/7df5f9e67e6e05ef.png" alt="7df5f9e67e6e05ef.png" /><figcaption aria-hidden="true">7df5f9e67e6e05ef.png</figcaption></figure><hr /><h2 id="今日重磅-1">今日重磅</h2><h3id="账号被风控就要收购tx-这究竟是道德的扭曲还是人性的沦丧">账号被风控就要收购tx,这究竟是道德的扭曲还是人性的沦丧?</h3><p>昨日, 一名网友在"NoneBot官方交流群"内求助:"go-cqhttp提示群消息无法发送账号可能被风控怎么办?",群友们一致回复"收购tx", 这究竟是道德的扭曲还是人性的沦丧?</p><figure><img src="/files/7b6f9205d5b5c91a.png" alt="7b6f9205d5b5c91a.png" /><figcaption aria-hidden="true">7b6f9205d5b5c91a.png</figcaption></figure><hr /><h3id="bot管理员随意禁用插件频发-bot作者们苦不堪言">Bot管理员随意禁用插件频发,Bot作者们苦不堪言</h3><p>昨日,https://github.com/ITCraftDevelopmentTeam/XDbot2项目的pacman插件被发现其容易导致刷屏,该插件被该Bot管理员禁用. 项目作者XiaoDeng3386说: "我当时去刷米游社了,结果回来发现我插件被删了"</p><figure><img src="/files/-463d36faa7ff3664.png" alt="-463d36faa7ff3664.png" /><figcaption aria-hidden="true">-463d36faa7ff3664.png</figcaption></figure><hr /><h3id="xiaodeng3386举报meowjiao抄袭其bot">"XiaoDeng3386"举报"meowjiao"抄袭其Bot</h3><p>"MeowBot"更新了ChatGPT点数系统, 被"XiaoDeng3386"举报抄袭他的"XDBot","MeowBot"作者"meowjiao"回复: "这是我自己想出来的,按照使用次数计算点数容易亏本"</p><figure><img src="/files/-6367d6620dd481a0.png" alt="-6367d6620dd481a0.png" /><figcaption aria-hidden="true">-6367d6620dd481a0.png</figcaption></figure><hr /><h3id="有人举报被一名冒充xdbot的人诈骗">有人举报被一名冒充"XDBot"的人诈骗</h3><p>一名骗子冒充"XDBot"发送XDBot Quick Math, 被回答后却只发送了一段文本,并未给予奖励</p><figure><img src="/files/585d34b05adf0051.png" alt="585d34b05adf0051.png" /><figcaption aria-hidden="true">585d34b05adf0051.png</figcaption></figure><hr /><h3 id="bot抽风-胡言乱语">Bot抽风, 胡言乱语</h3><p>"ChaiBot"抽风, 发送了一些奇怪的内容.</p><figure><img src="/files/-af74914207b678c.png" alt="-af74914207b678c.png" /><figcaption aria-hidden="true">-af74914207b678c.png</figcaption></figure><hr /><h3id="mrs无意中发现chaibot有括号补全功能">"Mrs"无意中发现"ChaiBot"有括号补全功能</h3><p>"Mrs"在聊天中发现"ChaiBot"有括号补全功能, "ChaiBot"作者"Chai"表示:"该插件来自于NoneBot商店"</p><figure><img src="/files/-65201389446cecb3.png" alt="-65201389446cecb3.png" /><figcaption aria-hidden="true">-65201389446cecb3.png</figcaption></figure><hr /><h3id="botsugar突发事故-多个节点同时下线-被误以为不退会员费就跑路">Bot"Sugar"突发事故,多个节点同时下线, 被误以为不退会员费就跑路</h3><p>"燕之豪"(群昵称"MED+迷梦龙")的Bot"Sugar"有多个节点,以保证Bot能够正常使用.但昨日"Sugar"的多个节点同时下线, 只剩一个,被"Mrs"误以为不退会员费就跑路</p><figure><img src="/files/2cd2891f30763d7d.png" alt="2cd2891f30763d7d.png" /><figcaption aria-hidden="true">2cd2891f30763d7d.png</figcaption></figure><hr /><h3id="如果您找到了不错的素材-欢迎投稿-联系人meowjiao-qq-3493487882">如果您找到了不错的素材,欢迎投稿, 联系人meowjiao, QQ: 3493487882</h3><hr /><p>©2023 meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最大正方形</title>
      <link href="/2023/07/18/%E2%95%AB%D1%8E%E2%94%A4%D1%94%E2%95%92%C2%A4%E2%95%96%E2%95%9C%E2%95%A8%E2%95%AC/"/>
      <url>/2023/07/18/%E2%95%AB%D1%8E%E2%94%A4%D1%94%E2%95%92%C2%A4%E2%95%96%E2%95%9C%E2%95%A8%E2%95%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-动态规划-最大正方形">[算法] [动态规划] 最大正方形</h1><p><strong>题目</strong></p><blockquote><p>在一个由<code>0</code>和<code>1</code>组成的<code>n * m</code>的二维矩阵内,找到只包含<code>1</code>的最大正方形的面积.</p></blockquote><p><strong>思路</strong></p><p>这道题目主要难点在于如何建表.</p><p>我们可以用<code>d[i][j]</code>表示这个正方形.</p><p>那如何表示呢?</p><p>如果记录左上角和右下角, 需要四维,而且很难想到<code>d</code>数组中存储什么.</p><p>我们可以记录右下角, 在<code>d</code>数组中存储正方形边长.</p><p>接下来是状态转移方程.</p><p><code>d[i][j] = min(&#123;d[i - 1][j - 1],d[i - 1][j],d[i][j - 1]&#125;) + 1;</code></p><p>这道题要求最大正方形, 但为什么用<code>min</code>呢?</p><figure><img src="/files/7.png" alt="7.png" /><figcaption aria-hidden="true">7.png</figcaption></figure><p>对于这个点, 如果它取了上方或左方的<code>1</code>,那么左上角是<code>0</code>, 因此要取左上方的<code>0</code>.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,ans,a[<span class="number">1010</span>][<span class="number">1010</span>],d[<span class="number">1010</span>][<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i][j] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(&#123;d[i - <span class="number">1</span>][j - <span class="number">1</span>],d[i - <span class="number">1</span>][j],d[i][j - <span class="number">1</span>]&#125;) + <span class="number">1</span>; <span class="comment">// 状态转移.</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans,d[i][j] * d[i][j]); <span class="comment">// 虽然d数组记录的是边长, 但题目要求输出面积.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl; <span class="comment">// 输出最大面积.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>©2023 meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>矩阵连乘</title>
      <link href="/2023/07/16/%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/"/>
      <url>/2023/07/16/%E7%9F%A9%E9%98%B5%E8%BF%9E%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-动态规划-矩阵连乘">[算法] [动态规划] 矩阵连乘</h1><p><strong>题目</strong></p><blockquote><p>矩阵<code>a</code>有<code>n</code>行<code>m</code>列,矩阵<code>b</code>有<code>x</code>行<code>y</code>列,如果<code>m = x</code>,它们相乘将得到<code>n</code>行<code>y</code>列的矩阵,一次矩阵乘法的运算次数为<code>n * m * y</code>.给出<code>n</code>个矩阵,每次可将相邻的两个相乘,求出如何使用最少的次数将<code>n</code>个矩阵合并成一个矩阵,输出最少次数.输入数据保证相邻的矩阵<code>m = x</code>.</p></blockquote><p><strong>思路</strong></p><p>求<code>n</code>个矩阵合成一个矩阵的最少次数,得先知道<code>n - 1</code>个矩阵合成一个矩阵的最少次数,满足子问题重叠.</p><p>所以这道题可以用动态规划求解.</p><p>枚举左端点<code>i</code>和右端点<code>j</code>,在<code>i ~ j</code>中寻找一个<code>k</code>,用<code>k</code>作为分割点, 让左右两边相乘.</p><p>但是如果这么枚举, 可能<code>j - i = 1</code>的状态还没找完,先找到了<code>j - i = 2</code>的状态.</p><p>因此,我们将枚举<code>i</code>和<code>j</code>改为枚举长度<code>len</code>和<code>i</code>.</p><p>这样, 我们可以推算出<code>j</code>.</p><p>状态转移方程:<code>d[i][j] = min(d[i][j],d[i][k] + d[k + 1][j] + a[i] * b[k] * b[j]);</code></p><p>注: a数组用于保存矩阵行数, b数组用于保存矩阵列数.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,j,a[<span class="number">110</span>],b[<span class="number">110</span>],d[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(d)); <span class="comment">// 因为要找最小值, 所以赋值成0x3f3f3f3f.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        d[i][i] = <span class="number">0</span>; <span class="comment">// i = j的状态次数为0.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>;len &lt;= n;len++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 上面已经填了i = j的状态, 不用在遍历了.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - len + <span class="number">1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// i不能遍历到n, 要给j留空间.</span></span><br><span class="line">            j = len + i - <span class="number">1</span>; <span class="comment">// 计算j.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i;k &lt; j;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 寻找分割点, 为了避免k + 1 &gt; j, 影响下面的状态转移, k的范围被设置成i ~ j - 1.</span></span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j],d[i][k] + d[k + <span class="number">1</span>][j] + a[i] * b[k] * b[j]); <span class="comment">// 状态转移.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[<span class="number">1</span>][n] &lt;&lt; endl; <span class="comment">// 输出答案.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>股票买卖V</title>
      <link href="/2023/07/16/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/"/>
      <url>/2023/07/16/%E8%82%A1%E7%A5%A8%E4%B9%B0%E5%8D%96/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-动态规划-股票买卖">[算法] [动态规划] 股票买卖</h1><p><strong>题目</strong></p><blockquote><p>给定一个长度为<code>n</code>的数组,第<code>i</code>个数字表示股票第<code>i</code>天的价格.设计一个算法计算出最大利润。在满足以下条件下, 你可以多次买卖股票:1.不能同时参与多笔交易 2.股票冷冻期为<code>1</code>天.</p></blockquote><p><strong>思路</strong></p><p>要计算第<code>i</code>天的收益, 需要用到第<code>i - 1</code>天的收益,满足子问题重叠.</p><p>最优子结构和无后效性也满足.</p><p>所以这道题可以用动态规划做.</p><blockquote><p><code>d[i][0]</code>表示第<code>i</code>天时未持有股票且不在冷冻期.<code>d[i][1]</code>表示第<code>i</code>天时持有股票.<code>d[i][2]</code>表示第<code>i</code>天时未持有股票且在冷冻期.</p></blockquote><p>如果未持有股票且不在冷冻期, 那么前一天有两种可能性,<code>d[i - 1][0]</code>和<code>d[i - 1][2]</code>.</p><p>如果持有股票, 那么前一天有两种可能性,<code>d[i - 1][1]</code>和<code>d[i - 1][0]</code>,如果是<code>d[i - 1][0]</code>, 则要减去<code>a[i]</code>.</p><p>如果未持有股票且不在冷冻期, 那么前一天为<code>d[i - 1][1]</code>,需加上<code>a[i]</code>.</p><p>状态转移方程:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d[i][0] = max(d[i - 1][0],d[i - 1][2]);</span><br><span class="line">d[i][1] = max(d[i - 1][1],d[i - 1][0] - a[i]);</span><br><span class="line">d[i][2] = d[i - 1][1] + a[i];</span><br></pre></td></tr></table></figure><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,a[<span class="number">100010</span>],d[<span class="number">100010</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(d,<span class="number">-0x3f</span>,<span class="built_in">sizeof</span>(d)); <span class="comment">// 为了避免初始状态为持有股票或冷冻期, 需要将d数组初始化为-0x3f3f3f3f.</span></span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 初始化.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 状态转移.</span></span><br><span class="line">        d[i][<span class="number">0</span>] = <span class="built_in">max</span>(d[i - <span class="number">1</span>][<span class="number">0</span>],d[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        d[i][<span class="number">1</span>] = <span class="built_in">max</span>(d[i - <span class="number">1</span>][<span class="number">1</span>],d[i - <span class="number">1</span>][<span class="number">0</span>] - a[i]);</span><br><span class="line">        d[i][<span class="number">2</span>] = d[i - <span class="number">1</span>][<span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(d[n][<span class="number">0</span>],d[n][<span class="number">2</span>]) &lt;&lt; endl; <span class="comment">// 最后一天未持有股票是最优选择.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>编辑距离</title>
      <link href="/2023/07/15/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
      <url>/2023/07/15/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-动态规划-编辑距离">[算法] [动态规划] 编辑距离</h1><p><strong>题目</strong></p><blockquote><p>有字符串<code>a</code>和字符串<code>b</code>.我们要用最少的字符操作次数,将字符串<code>a</code>转换为字符串<code>b</code>. 字符操作有三种:1.删除一个字符; 2.插入一个字符; 3.将一个字符改为另一个字符.对字符串<code>a</code>和<code>b</code>,计算出将字符串<code>a</code>变为字符串<code>b</code>所用的最少字符操作次数.</p></blockquote><p><strong>思路</strong></p><p>用<code>d(i, j)</code>表示<code>a</code>第<code>1~i</code>个字符和<code>b</code>第<code>1~j</code>个字符的编辑距离.</p><p>题目满足最优子结构.</p><p><code>d(i, j)</code>和<code>d(i - 1, j)</code>,<code>d(i, j - 1)</code>, <code>d(i - 1, j - 1)</code>有关,满足了子问题重叠.</p><p>而且已经求出的最优解, 不会被后面的决策影响, 满足无后效性.</p><p>所以这道题可以用动态规划求解.</p><p>接下来要写状态转移方程.</p><p>如果<code>a(i) == b(j)</code>,<code>d(i, j) = d(i - 1, j - 1)</code>.</p><p>否则<code>d(i, j) = max(d(i - 1, j), d(i, j - 1), d(i - 1, j - 1)) + 1</code>.</p><p>还有一些细节, 在代码注释中.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,d[<span class="number">2010</span>][<span class="number">2010</span>];</span><br><span class="line">string a,b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    n = a.<span class="built_in">length</span>(); <span class="comment">// a的长度.</span></span><br><span class="line">    m = b.<span class="built_in">length</span>(); <span class="comment">// b的长度.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// d(i, 0)时, 需要把a的所有字符删除, 最少用i次.</span></span><br><span class="line">        d[i][<span class="number">0</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// d(0, i)时, 需要把b的所有字符添加进a中, 最少用i次.</span></span><br><span class="line">        d[<span class="number">0</span>][i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 字符串下标从0开始, 但是为了避免越界, DP参数从1开始, 所以要将下标减1.</span></span><br><span class="line">                d[i][j] = d[i - <span class="number">1</span>][j - <span class="number">1</span>]; <span class="comment">// 递推.</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(&#123;d[i - <span class="number">1</span>][j],d[i][j - <span class="number">1</span>],d[i - <span class="number">1</span>][j - <span class="number">1</span>]&#125;) + <span class="number">1</span>; <span class="comment">// 递推.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[n][m] &lt;&lt; endl; <span class="comment">// 输出答案.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>饭卡</title>
      <link href="/2023/07/13/%E9%A5%AD%E5%8D%A1/"/>
      <url>/2023/07/13/%E9%A5%AD%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-动态规划-饭卡">[算法] [动态规划] 饭卡</h1><p><strong>常见背包代码</strong></p><ul><li><p>01背包</p><p>状态转移方程: d(j) = max(d(j), d(j - w(i)) + c(i))</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m,n,w[<span class="number">40</span>],c[<span class="number">40</span>],d[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= w[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// j要逆向遍历.</span></span><br><span class="line">            d[j] = <span class="built_in">max</span>(d[j],d[j - w[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>完全背包</p><p>状态转移方程: d(j) = max(d(j), d(j - w(i)) + c(i))</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m,n,w[<span class="number">40</span>],c[<span class="number">40</span>],d[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w[i];j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// j要正向遍历.</span></span><br><span class="line">            d[j] = <span class="built_in">max</span>(d[j],d[j - w[i]] + c[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多重背包(二进制分组)</p><p>状态转移方程: d(j) = max(d(j), d(j - w(i)) + c(i))</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,cnt,v,w,s,a[<span class="number">24010</span>],b[<span class="number">24010</span>],d[<span class="number">4010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        <span class="comment">// 二进制分组.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= s;s -= j,j *= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++cnt] = v * j;</span><br><span class="line">            b[cnt] = w * j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            a[++cnt] = v * s;</span><br><span class="line">            b[cnt] = w * s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= a[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// j要逆向遍历.</span></span><br><span class="line">            d[j] = <span class="built_in">max</span>(d[j],d[j - a[i]] + b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>混合背包</p><p>将01背包、完全背包、多重背包结合即可.</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m,n,w[<span class="number">40</span>],c[<span class="number">40</span>],p[<span class="number">40</span>],d[<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i] &gt;&gt; p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p[i] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 01背包.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= w[i];j--)</span><br><span class="line">            &#123;</span><br><span class="line">                d[j] = <span class="built_in">max</span>(d[j],d[j - w[i]] + c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 完全背包.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = w[i];j &lt;= m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                d[j] = <span class="built_in">max</span>(d[j],d[j - w[i]] + c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 多重背包.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt;= w[i];j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;k &lt;= p[i] &amp;&amp; k * w[i] &lt;= j;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    d[j] = <span class="built_in">max</span>(d[j],d[j - k * w[i]] + k * c[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二维费用背包</p><p>状态转移方程: d(j, k) = max(d(j, k), d(j - v(i), k - w(i)) +c(i))</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,v,m,b[<span class="number">1010</span>],w[<span class="number">1010</span>],c[<span class="number">1010</span>],d[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; v &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; b[i] &gt;&gt; w[i] &gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = v;j &gt;= b[i];j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = m;k &gt;= w[i];k--)</span><br><span class="line">            &#123;</span><br><span class="line">                d[j][k] = <span class="built_in">max</span>(d[j][k],d[j - b[i]][k - w[i]] + c[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[v][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分组背包</p><p>状态转移方程: d(i, j) = max(d(i, j), d(i - 1, j - w(k)) + c(k))</p><p>代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> v,n,t,w[<span class="number">40</span>],c[<span class="number">40</span>],p[<span class="number">40</span>],d[<span class="number">40</span>][<span class="number">210</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; v &gt;&gt; n &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; w[i] &gt;&gt; c[i] &gt;&gt; p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>;j &lt;= v;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            d[i][j] = d[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>;k &lt;= n;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[k] == i &amp;&amp; j &gt;= w[k])</span><br><span class="line">                &#123;</span><br><span class="line">                    d[i][j] = <span class="built_in">max</span>(d[i][j],d[i - <span class="number">1</span>][j - w[k]] + c[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[t][v] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>题目</strong></p><blockquote><p>达达食堂的饭卡会在购买之前判断余额.如果购买一个商品前,剩余金额m大于等于5元, 就可以购买,否则无法购买.大家都希望使卡上的余额最少.食堂中有n种菜,每种菜可购买一次.已知每种菜的价格以及卡上的余额,卡上的余额最少为多少.</p></blockquote><p><strong>思路</strong></p><p>这道题需要思考如何使余额最少.</p><p>我们可以先保留5元, 在最后用来买最贵的菜, 剩下的m -5元当成一个01背包即可.</p><p>注意, 如果m &lt; 5, 直接输出m即可.</p><p>还有一点, 遍历菜品时, i应该小于n, 因为最贵的菜要单独购买.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,p[<span class="number">1010</span>],d[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; p[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cin &gt;&gt; m;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 什么都买不了的情况.</span></span><br><span class="line">            cout &lt;&lt; m &lt;&lt; endl; <span class="comment">// m为答案.</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(p + <span class="number">1</span>,p + n + <span class="number">1</span>); <span class="comment">// 按照菜品的价格排序.</span></span><br><span class="line">        <span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="built_in">sizeof</span>(d)); <span class="comment">// 多组输入记得清空DP数组.</span></span><br><span class="line">        <span class="comment">// 01背包.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 注意, 这里的条件是i &lt; n而不是i &lt;= n.</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m - <span class="number">5</span>;j &gt;= p[i];j--)</span><br><span class="line">            &#123;</span><br><span class="line">                d[j] = <span class="built_in">max</span>(d[j],d[j - p[i]] + p[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; m - d[m - <span class="number">5</span>] - p[n] &lt;&lt; endl; <span class="comment">// 单独购买最贵的菜.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>传纸条</title>
      <link href="/2023/07/12/%E4%BC%A0%E7%BA%B8%E6%9D%A1/"/>
      <url>/2023/07/12/%E4%BC%A0%E7%BA%B8%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="算法-动态规划-传纸条">[算法] [动态规划] 传纸条</h1><p><strong>题目</strong></p><blockquote><p>小渊和小轩是好朋友也是同班同学,他们在一起总有谈不完的话题.一次素质拓展活动中,班上同学安排做成一个m行n列的矩阵, 而小渊和小轩被安排在矩阵对角线的两端,因此, 他们就无法直接交谈了.幸运的是,他们可以通过传纸条来进行交流.纸条要经由许多同学传到对方手里,小渊坐在矩阵的左上角, 坐标(1,1), 小轩坐在矩阵的右下角,坐标(m,n).从小渊传到小轩的纸条只可以向下或者向右传递,从小轩传给小渊的纸条只可以向上或者向左传递.在活动进行中,小渊希望给小轩传递一张纸条,同时希望小轩给他回复.班里每个同学都可以帮他们传递, 但只会帮他们一次,也就是说如果此人在小渊递给小轩纸条的时候帮忙,那么在小轩递给小渊的时候就不会再帮忙.反之亦然.还有一件事情需要注意,全班每个同学愿意帮忙的好感度有高有低(注意: 小渊和小轩的好心程度没有定义,输入时用0表示), 可以用一个0-100的自然数来表示,数越大表示越好心.小渊和小轩希望尽可能找好心程度高的同学来帮忙传纸条,即找到来回两条传递路径, 使得这两条路径上同学的好心程度之和最大.现在,请你帮助小渊和小轩找到这样的两条路径.</p></blockquote><p><strong>思路</strong></p><p>这道题的难点在于要找两条路径.</p><p>如果我们进行两次DP, 路径可能重叠.</p><p>所以我们换个思路, 让两张纸条同时传递,并且让两张纸条都变成从小渊传递到小轩, 转变对答案没有影响.</p><ul><li><p>四维DP</p><p>使用一个四维数组d, d(i, j, k, l)表示纸条1在(i, j), 纸条2在(k, l).</p><p>状态转移方程: d(i, j, k, l) = max(d(i - 1, j, k - 1, l), d(i - 1, j,k, l - 1), d(i, j - 1, k - 1, l), d(i, j - 1, k, l - 1)) + a(i, j) +a(k, l)</p><p>无需判重, 保证k &gt; i即可.</p><p>这种方法时间复杂度较高, 可能超时.</p></li><li><p>三维DP</p><p>我们发现i + j == k + l, 所以增加一维s来保存i + j, 减掉保存j和l的两维,用s - i代替j, s - k代替l.</p><p>状态转移方程: max(d(s - 1, i, k), d(s - 1, i - 1, k), d(s - 1, i, k -1), d(s - 1,i - 1,k - 1)) + a(i, s - i) + a(k, s - k)</p><p>无需判重, 保证k &gt; i即可.</p><p>这种方法会使时间复杂度变小, 但代价是空间会变大.</p></li><li><p>二维DP</p><p>我们发现三维DP的状态转移方程只和d(s - 1)有关, 所以可以利用滚动数组,去掉s这一维.</p><p>不过在枚举的时候还是要枚举s, 并且i和k要倒序枚举,防止某个状态的转移元素在状态转移前被修改.</p><p>状态转移方程: max(d(i, k), d(i - 1, k), d(i, k - 1), d(i - 1,k - 1))+ a(i, s - i) + a(k, s - k)</p><p>无需判重, 保证k &gt; i即可.</p><p>这种方法会使空间变小.</p></li></ul><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m,n,a[<span class="number">60</span>][<span class="number">60</span>],d[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> s = <span class="number">3</span>;s &lt; m + n;s++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 终点不用DP.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>;i &gt;= <span class="number">1</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = m;j &gt; i;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s - i &gt;= <span class="number">1</span> &amp;&amp; s - j &gt;= <span class="number">1</span> &amp;&amp; s - i &lt;= n &amp;&amp; s - j &lt;= n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 若没有越界.</span></span><br><span class="line">                    d[i][j] = <span class="built_in">max</span>(&#123;d[i][j],d[i - <span class="number">1</span>][j - <span class="number">1</span>],d[i - <span class="number">1</span>][j],d[i][j - <span class="number">1</span>]&#125;) + a[i][s - i] + a[j][s - j]; <span class="comment">// 状态转移.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; d[m - <span class="number">1</span>][m] &lt;&lt; endl; <span class="comment">// 终点没有DP过, 所以输出d[m - 1][m];</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>加油问题</title>
      <link href="/2023/07/11/%E5%8A%A0%E6%B2%B9%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/11/%E5%8A%A0%E6%B2%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="算法思想-贪心-加油问题">[算法思想] [贪心] 加油问题</h1><p><strong>题目</strong></p><blockquote><p>你需要驾驶一辆卡车行驶L单位的距离.最开始时,卡车上有P单位的汽油.卡车每开1单位距离需要消耗1单位的汽油.如果在途中车上的汽油耗尽, 卡车就无法继续前进,因而无法到达终点.在途中一共有N个加油站.第i个加油站在距离起点Ai单位距离的地方,最多可以给卡车加Bi单位的汽油, 假设卡车的燃料箱的容量是无限大的,无论加多少油都没有问题, 那么请问卡车是否能到达终点?如果可以,最少需要加多少次油?如果可以到达终点, 输出最少的加油次数, 否则输出-1.</p></blockquote><p><strong>思路</strong></p><p>刚看到题的时候, 觉得让卡车一直开, 遇到加油站后,如果卡车无法到达下一个加油站, 加油即可.</p><p>但是想了想, 发现了一个问题,如果加了油之后还是无法到达下一个加油站呢?</p><p>介绍一下今天的主角——优先队列</p><p>优先队列是头文件queue中的一种数据结构,它可以使内部元素保持升序或降序状态, 且插入和删除元素时间复杂度为O(logn).</p><p>在经过加油站后, 我们把这个加油站的油量放进降序优先队列里,如果当前油量耗尽了, 取出队首油量, 回溯回去加油, 再回到当前位置.</p><p>其实不用回溯, 因为回溯再开回来后, 油箱里只会剩下队首油量,所以直接把队首油量加到当前油箱里即可.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,l,p,m,c,ans;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a[<span class="number">10010</span>];</span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; l &gt;&gt; p;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>); <span class="comment">// 按照离起点的距离排序.</span></span><br><span class="line">    q.<span class="built_in">push</span>(p); <span class="comment">// 把初始油量也当成加油站, 这样会方便一点.</span></span><br><span class="line">    c = <span class="number">1</span>; <span class="comment">// 记录当前加油站.</span></span><br><span class="line">    <span class="keyword">while</span> (m &lt; l &amp;&amp; !q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果没有开到终点并且还有加油站.</span></span><br><span class="line">        m += q.<span class="built_in">top</span>(); <span class="comment">// 加油.</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans++; <span class="comment">// 记录加油次数.</span></span><br><span class="line">        <span class="keyword">while</span> (m &gt;= a[c].first &amp;&amp; c &lt;= n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 把经过的加油站放入优先队列.</span></span><br><span class="line">            q.<span class="built_in">push</span>(a[c++].second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m &lt; l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 无法行驶到终点的情况.</span></span><br><span class="line">        cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; ans - <span class="number">1</span> &lt;&lt; endl; <span class="comment">// 初始油量也被当成了加油站, 所以减1.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>奶牛日光浴</title>
      <link href="/2023/07/09/%E5%A5%B6%E7%89%9B%E6%97%A5%E5%85%89%E6%B5%B4/"/>
      <url>/2023/07/09/%E5%A5%B6%E7%89%9B%E6%97%A5%E5%85%89%E6%B5%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="算法思想-贪心-奶牛日光浴">[算法思想] [贪心] 奶牛日光浴</h1><p><strong>题目</strong></p><blockquote><p>有C头奶牛进行日光浴,第i头奶牛需要minSPF[i]到maxSPF[i]单位强度之间的阳光.每头奶牛在日光浴前必须涂防晒霜,防晒霜有L种, 涂上第i种之后, 身体接收到的阳光强度就会稳定为SPF[i],第i种防晒霜有cover[i]瓶, 求最多可以满足多少头奶牛进行日光浴.</p></blockquote><p><strong>思路</strong></p><p>先排序:</p><p>对于奶牛, 按照最小阳光强度降序排序;</p><p>对于防晒霜, 按照阳光强度降序排序.</p><p>然后遍历每一个奶牛, 找到阳光强度最高且满足条件的防晒霜,这样可以让后面的奶牛有更多选择空间.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c,l,ans;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a[<span class="number">2510</span>],b[<span class="number">2510</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a,pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.first &gt; b.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; c &gt;&gt; l;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= c;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; a[i].first &gt;&gt; a[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; b[i].first &gt;&gt; b[i].second;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>,a + c + <span class="number">1</span>,cmp); <span class="comment">// 对奶牛进行排序.</span></span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>,b + l + <span class="number">1</span>,cmp); <span class="comment">// 对防晒霜进行排序.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= c;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= l;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b[j].first &gt;= a[i].first &amp;&amp; b[j].first &lt;= a[i].second &amp;&amp; b[j].second)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 找到阳光强度最高且满足条件的防晒霜.</span></span><br><span class="line">                ans++; <span class="comment">// 满足条件的奶牛数量加1.</span></span><br><span class="line">                b[j].second--; <span class="comment">// 当前奶牛使用的防晒霜数量减1.</span></span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 继续遍历下一头奶牛.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Crossing River</title>
      <link href="/2023/07/09/Crossing-River/"/>
      <url>/2023/07/09/Crossing-River/</url>
      
        <content type="html"><![CDATA[<h1 id="算法思想-贪心-crossing-river">[算法思想] [贪心] CrossingRiver</h1><p><strong>贪心</strong></p><blockquote><p>贪心算法是指在对问题求解时, 总是做出在当前看来是最好的选择,而不从整体最优上考虑, 所以贪心算法得到的是局部最优解.</p></blockquote><p><strong>题目</strong></p><blockquote><p>几个人过河, 每次两人过河, 一人回去, 每次过河的时间由慢者决定,求过河所需的最短时间.</p></blockquote><p><strong>思路</strong></p><p>先分析一下样例.</p><blockquote><p>4<br>1 2 5 10</p></blockquote><p>对于这个样例, 我们可以进行如下的操作:</p><blockquote><ol type="1"><li>1和2过河, 1回来.<br>(2) 5和10过河, 2回来.<br>(3) 1和2过河.</li></ol></blockquote><p>时间: 2 + 1 + 10 + 2 + 1 = 17.</p><p>这种方案时间最短.</p><p>将记录每个人过河时间的数组a进行排序,我们就有了一个表格和一个计算流程:</p><table><thead><tr class="header"><th>&gt;</th><th>人数</th></tr></thead><tbody><tr class="odd"><td>n = 1</td><td>a[1]</td></tr><tr class="even"><td>n = 2</td><td>a[2]</td></tr><tr class="odd"><td>n = 3</td><td>a[1] + a[2] + a[3]</td></tr><tr class="even"><td>n &gt;= 4</td><td>min(a[1] + a[2] * 2 + a[4], a[1] * 2 + a[3] + a[4])</td></tr></tbody></table><blockquote><ol type="1"><li>按照表格计算.<br>(2) n -= 2.<br>(3) 若n &gt;= 1, 执行(1),否则计算完成.</li></ol></blockquote><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> t,n,a[<span class="number">1010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>] + a[<span class="number">2</span>] + a[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= <span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(a[<span class="number">1</span>] + a[<span class="number">2</span>] * <span class="number">2</span> + a[n],a[<span class="number">1</span>] * <span class="number">2</span> + a[n - <span class="number">1</span>] + a[n]) + <span class="built_in">solve</span>(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(a + <span class="number">1</span>,a + n + <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; <span class="built_in">solve</span>(n) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>©2023 meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>可达鸭J2知识总结</title>
      <link href="/2023/06/24/%E5%8F%AF%E8%BE%BE%E9%B8%ADJ2%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/2023/06/24/%E5%8F%AF%E8%BE%BE%E9%B8%ADJ2%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="思维导图">思维导图</h3><figure><img src="/files/6.png" alt="6.png" /><figcaption aria-hidden="true">6.png</figcaption></figure><ul><li><h1 id="图的存储与遍历">图的存储与遍历</h1><ul><li><h2 id="邻接矩阵">邻接矩阵</h2><p>实现方式: 通过数组存储边.若i和j有一条单向边, 则a<sub>i j</sub> == 1,a<sub>j i</sub> == 0;若i和j有一条双向边, 则a<sub>i j</sub> == 1, a<sub>ji</sub> == 1.</p><p><strong>题目</strong></p><p>输入一个无向图的信息,输出图的邻接矩阵和与顶点t直接相连的顶点的个数及邻接点.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,k,x,y,z,t,cnt,a[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        a[x][y] = z;</span><br><span class="line">        a[y][x] = z;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[t][i])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[t][i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h3 id="邻接表">邻接表</h3><p>实现方式:</p><ul><li><p>一维数组实现: 使用三个数组和一个变量, 数组head存储顶点相连的边,数组ver存储边的终点, 数组nxt存储下一条与顶点相连的边,变量index存储边的序号.若有权值, 使用we数组存储边对应的权值.</p><figure><img src="/files/5.png" alt="5.png" /><figcaption aria-hidden="true">5.png</figcaption></figure><p><strong>题目</strong></p><p>给定一个有权无向图的信息, 按照前插法的方式输出每个节点的邻接点.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,x,y,z,index,head[<span class="number">100010</span>],ver[<span class="number">100010</span>],nxt[<span class="number">100010</span>],we[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ver[++index] = y;</span><br><span class="line">    nxt[index] = head[x];</span><br><span class="line">    we[index] = z;</span><br><span class="line">    head[x] = index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        <span class="built_in">add</span>(x,y,z);</span><br><span class="line">        <span class="built_in">add</span>(y,x,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!head[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;zero&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = head[i];j;j = nxt[j])</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; ver[j] &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; we[j] &lt;&lt; <span class="string">&quot;) &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>动态数组实现: 使用一个二维动态数组v存顶点和边的终点,若要建一条从i到j的有向边, 则<code>v[i].push_back(j);</code>.若有权值,则使用pair类型的二维动态数组.</p><p><strong>题目</strong></p><p>给定一个有权无向图的信息, 按照前插法的方式输出每个节点的邻接点.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,x,y,z;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; v[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        v[x].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(y,z));</span><br><span class="line">        v[y].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(x,z));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot;: &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!v[i].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;zero&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = v[i].<span class="built_in">size</span>() - <span class="number">1</span>;j &gt;= <span class="number">0</span>;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; v[i][j].first &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; v[i][j].second &lt;&lt; <span class="string">&quot;) &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><h1 id="搜索">搜索</h1><ul><li><p>深度优先搜索</p><p>实现方式: 使用递归, 在图中沿一条路径一直往下走, 无路可走时回溯.</p><p><strong>题目</strong></p><p>读入一个无向图的邻接矩阵, 按照深度优先搜索的方式遍历所有顶点,输出遍历顶点的顺序.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,a[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">60</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag[x] = <span class="literal">true</span>;</span><br><span class="line">    cout &lt;&lt; x - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[x][i] &amp;&amp; !flag[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>广度优先搜索</p><p>实现方式: 使用队列, 在图中同时走多条路线.</p><p><strong>题目</strong></p><p>读入一个无向图的邻接矩阵, 按照广度优先搜索的方式遍历所有顶点,输出遍历顶点的顺序.</p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,tmp,a[<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"><span class="type">bool</span> flag[<span class="number">60</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    q.<span class="built_in">push</span>(x);</span><br><span class="line">    flag[x] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        cout &lt;&lt; tmp - <span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[tmp][i] &amp;&amp; !flag[i])</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">                flag[i] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树的直径</title>
      <link href="/2023/05/19/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
      <url>/2023/05/19/%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#概念">概念</a></li><li><a href="#题目描述">题目描述</a></li><li><a href="#思路">思路</a></li><li><a href="#代码">代码</a></li></ul><h1 id="数据结构-树-树的直径">[数据结构] [树] 树的直径</h1><h5 id="概念">概念</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在一棵树中, 从所有可能的点对中找到两个相距最远的点, 这两个点之间的路径的长度就是这棵树的直径.</span><br></pre></td></tr></table></figure><h5 id="题目描述">题目描述</h5><p>题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定一棵树, 树中包含n个结点(编号1~n)和n-1条无向边, 每条边都有一个权值.</span><br><span class="line">现在请你找到树中的一条路径, 使得路径两端的点的距离最远.</span><br><span class="line">注意: 路径中可以只包含一个点.</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行包含整数n.</span><br><span class="line">接下来n-1行, 每行包含三个整数ai, bi, ci表示点ai和bi之间存在一条权值为ci的边.</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输出一个整数, 表示树的最长路径的长度.</span><br></pre></td></tr></table></figure><hr /><h5 id="思路">思路</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据树的直径的特征, 我们可以从任意点a出发, 使用dfs找到距离最远的一个点b, 从点b出发, 使用dfs找到距离最远的一个点c, 从点b到点c的路径就是一条树的直径.</span><br></pre></td></tr></table></figure><h5 id="代码">代码</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data,weight; <span class="comment">// data用于存子节点的编号, weight用于存这条边的权值.</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> n,ai,bi,ci,max_len,extre_node; <span class="comment">// max_len用于存直径的权值和, extre_node用于存端点.</span></span><br><span class="line">node push; <span class="comment">// push用于建边时存放节点的信息.</span></span><br><span class="line">vector&lt;node&gt; tree[<span class="number">10010</span>]; <span class="comment">// 邻接表存树</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> root,<span class="type">int</span> len,<span class="type">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// root存储当前搜索到的节点, len存储当前搜到的路径的权值和, father用于存储root的父节点.</span></span><br><span class="line">    <span class="keyword">if</span> (len &gt; max_len)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 当前长度大于最大长度.</span></span><br><span class="line">        max_len = len; <span class="comment">// 将最大长度设为当前长度.</span></span><br><span class="line">        extre_node = root; <span class="comment">// 将端点设为当前节点.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; tree[root].<span class="built_in">size</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历当前节点的子节点.</span></span><br><span class="line">        <span class="keyword">if</span> (tree[root][i].data != father)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果这个子节点不是父节点(因为是无向图, 所以有子节点是父节点的可能性).</span></span><br><span class="line">            <span class="built_in">dfs</span>(tree[root][i].data,len + tree[root][i].weight,root); <span class="comment">// 遍历这个子节点.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - <span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; ai &gt;&gt; bi &gt;&gt; ci;</span><br><span class="line">        push.data = bi;</span><br><span class="line">        push.weight = ci;</span><br><span class="line">        tree[ai].<span class="built_in">push_back</span>(push);</span><br><span class="line">        push.data = ai;</span><br><span class="line">        push.weight = ci;</span><br><span class="line">        tree[bi].<span class="built_in">push_back</span>(push);</span><br><span class="line">        <span class="comment">// 建边.</span></span><br><span class="line">    &#125;</span><br><span class="line">    max_len = <span class="number">0</span>; <span class="comment">// 将权值和赋值为0.</span></span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// 找到第一个端点.</span></span><br><span class="line">    max_len = <span class="number">0</span>; <span class="comment">// 将权值和赋值为0.</span></span><br><span class="line">    <span class="built_in">dfs</span>(extre_node,<span class="number">0</span>,<span class="number">0</span>); <span class="comment">// 找到第二个端点, 求出最大权值和.</span></span><br><span class="line">    cout &lt;&lt; max_len &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>By meowjiao</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>恢复二叉搜索树</title>
      <link href="/2023/04/28/%E2%95%97%E2%95%93%E2%95%95%E2%94%A4%E2%95%A2%E2%96%A0%E2%96%93%D1%86%E2%95%A6%E2%95%A4%E2%95%A6%D1%9E%E2%95%A9%D1%9E/"/>
      <url>/2023/04/28/%E2%95%97%E2%95%93%E2%95%95%E2%94%A4%E2%95%A2%E2%96%A0%E2%96%93%D1%86%E2%95%A6%E2%95%A4%E2%95%A6%D1%9E%E2%95%A9%D1%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-树-恢复二叉搜索树">[数据结构] [树] 恢复二叉搜索树</h1><hr /><p><strong>题目描述</strong></p><p>题目</p><p>给你一棵二叉搜索树的信息,该树中的两个节点的值被错误地交换.请你找到这两个点并将其恢复成正确的结构.</p><p>输入</p><p>第一行输入一个整数n, 表示接下来要输入n个数据;</p><p>第二行输入n个数据ai,第i个数字表示第i个节点的数值为ai.(-2<sup>31&lt;=ai&lt;=2</sup>31-1),如果输入的为0, 表示这个位置没有节点.</p><p>节点个数不超过10000个, 数据之前用空格间隔.</p><p>输出</p><p>输出正确的二叉搜索树的前序遍历</p><hr /><p><strong>样例</strong></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51 3 0 0 2</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 1 2</span><br></pre></td></tr></table></figure><hr /><p><strong>思路</strong></p><p>这道题可以中序遍历输入的二叉搜索树, 通过比较找到两个被交换的数据,交换它们, 前序遍历即可.</p><ul><li><p>预编译指令</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>设置命名空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure></li><li><p>定义变量.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,l,f,s,t[<span class="number">10010</span>],e[<span class="number">10010</span>],p[<span class="number">10010</span>];<span class="comment">// n用于输入数据个数, l用于记录中序遍历时上一个节点的编号, f用于记录第一个被交换的元素, s用于记录第二个被交换的元素, t用于存树, p用于存树中每个元素的位置.</span></span><br></pre></td></tr></table></figure></li><li><p>定义中序遍历函数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">center</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果当前结点为空, 说明该结点没有子结点.</span></span><br><span class="line">        <span class="keyword">return</span> ;<span class="comment">// 回溯.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有左子树.</span></span><br><span class="line">        <span class="built_in">center</span>(x * <span class="number">2</span>);<span class="comment">// 遍历左子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l != <span class="number">0</span> &amp;&amp; l &gt; t[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果上一个结点的值大于这一个结点的值, 说明上一个结点位置错误, 有可能与当前结点交换, 也可能与其他结点交换.</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果以前没有位置错误的数.</span></span><br><span class="line">            f = l;<span class="comment">// 将第一个位置错误的数设为上一个结点.</span></span><br><span class="line">            s = t[x];<span class="comment">// 因为上一个结点有可能与当前结点交换, 所以将第二个位置错误的数设为当前结点.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果以前有位置错误的数, 说明当前节点为第二个位置错误的数.</span></span><br><span class="line">            s = t[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l = t[x];<span class="comment">// 记录上一个结点, 用于遍历子结点.</span></span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> + <span class="number">1</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span> + <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有右子树.</span></span><br><span class="line">        <span class="built_in">center</span>(x * <span class="number">2</span> + <span class="number">1</span>);<span class="comment">// 遍历右子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义前序遍历函数.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">front</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果当前结点为空, 说明该结点没有子结点.</span></span><br><span class="line">        <span class="keyword">return</span> ;<span class="comment">// 回溯.</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; t[x] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">// 输出前序遍历过程.</span></span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有左子树.</span></span><br><span class="line">        <span class="built_in">center</span>(x * <span class="number">2</span>);<span class="comment">// 遍历左子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> + <span class="number">1</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span> + <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有右子树.</span></span><br><span class="line">        <span class="built_in">center</span>(x * <span class="number">2</span> + <span class="number">1</span>);<span class="comment">// 遍历右子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义主函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;<span class="comment">// 输入数据数量.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t[i];<span class="comment">// 输入树的每个结点.</span></span><br><span class="line">        p[t[i]] = i;<span class="comment">// 记录当前节点在数组中的位置, 用于交换位置错误的两个数.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">center</span>(<span class="number">1</span>);<span class="comment">// 中序遍历, 找到位置错误的两个数.</span></span><br><span class="line">    <span class="built_in">swap</span>(t[f],t[s]);<span class="comment">// 交换位置错误的两个数.</span></span><br><span class="line">    <span class="built_in">front</span>(<span class="number">1</span>);<span class="comment">// 前序遍历, 输出答案.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,l,f,s,t[<span class="number">10010</span>],e[<span class="number">10010</span>],p[<span class="number">10010</span>];<span class="comment">// n用于输入数据个数, l用于记录中序遍历时上一个节点的编号, f用于记录第一个被交换的元素, s用于记录第二个被交换的元素, t用于存树, p用于存树中每个元素的位置.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">center</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果当前结点为空, 说明该结点没有子结点.</span></span><br><span class="line">        <span class="keyword">return</span> ;<span class="comment">// 回溯.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有左子树.</span></span><br><span class="line">        <span class="built_in">center</span>(x * <span class="number">2</span>);<span class="comment">// 遍历左子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l != <span class="number">0</span> &amp;&amp; l &gt; t[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果上一个结点的值大于这一个结点的值, 说明上一个结点位置错误, 有可能与当前结点交换, 也可能与其他结点交换.</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果以前没有位置错误的数.</span></span><br><span class="line">            f = l;<span class="comment">// 将第一个位置错误的数设为上一个结点.</span></span><br><span class="line">            s = t[x];<span class="comment">// 因为上一个结点有可能与当前结点交换, 所以将第二个位置错误的数设为当前结点.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果以前有位置错误的数, 说明当前节点为第二个位置错误的数.</span></span><br><span class="line">            s = t[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    l = t[x];<span class="comment">// 记录上一个结点, 用于遍历子结点.</span></span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> + <span class="number">1</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span> + <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有右子树.</span></span><br><span class="line">        <span class="built_in">center</span>(x * <span class="number">2</span> + <span class="number">1</span>);<span class="comment">// 遍历右子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">front</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[x] == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果当前结点为空, 说明该结点没有子结点.</span></span><br><span class="line">        <span class="keyword">return</span> ;<span class="comment">// 回溯.</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; t[x] &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">// 输出前序遍历过程.</span></span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有左子树.</span></span><br><span class="line">        <span class="built_in">front</span>(x * <span class="number">2</span>);<span class="comment">// 遍历左子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x * <span class="number">2</span> + <span class="number">1</span> &lt;= n &amp;&amp; t[x * <span class="number">2</span> + <span class="number">1</span>] != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果有右子树.</span></span><br><span class="line">        <span class="built_in">front</span>(x * <span class="number">2</span> + <span class="number">1</span>);<span class="comment">// 遍历右子树.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;<span class="comment">// 输入数据数量.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; t[i];<span class="comment">// 输入树的每个结点.</span></span><br><span class="line">        p[t[i]] = i;<span class="comment">// 记录当前节点在数组中的位置, 用于交换位置错误的两个数.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">center</span>(<span class="number">1</span>);<span class="comment">// 中序遍历, 找到位置错误的两个数.</span></span><br><span class="line">    <span class="built_in">swap</span>(t[p[f]],t[p[s]]);<span class="comment">// 交换位置错误的两个数.</span></span><br><span class="line">    <span class="built_in">front</span>(<span class="number">1</span>);<span class="comment">// 前序遍历, 输出答案.</span></span><br><span class="line">    cout &lt;&lt; endl;<span class="comment">// 换行.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr /><p>Arch is the best.</p><p>K.I.S.S.</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
